# Azure DevOps Pipeline para DevOps Challenge
# Este pipeline implementa CI/CD completo para a aplicação

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - app/*
      - helm/*
      - azure-pipelines.yml

pr:
  branches:
    include:
      - main
  paths:
    include:
      - app/*
      - helm/*

variables:
  # Configurações gerais
  - name: vmImageName
    value: 'ubuntu-latest'
  
  # Configurações da aplicação
  - name: appName
    value: 'devops-challenge-app'
  - name: dockerfilePath
    value: '$(Build.SourcesDirectory)/app/Dockerfile'
  - name: buildContext
    value: '$(Build.SourcesDirectory)/app'
  
  # Configurações do Azure Container Registry
  - name: containerRegistry
    value: 'acrdevopschallenge.azurecr.io'
  - name: imageRepository
    value: 'devops-challenge-app'
  - name: imageTag
    value: '$(Build.BuildId)'
  
  # Configurações do Kubernetes
  - name: k8sNamespace
    value: 'devops-challenge'
  - name: helmChartPath
    value: '$(Build.SourcesDirectory)/helm'
  
  # Service Connections (configurar no Azure DevOps)
  - name: dockerRegistryServiceConnection
    value: 'acr-service-connection'
  - name: kubernetesServiceConnection
    value: 'aks-service-connection'

stages:
  # Stage 1: Build e Testes
  - stage: Build
    displayName: 'Build e Testes'
    jobs:
      - job: BuildApp
        displayName: 'Build da Aplicação'
        pool:
          vmImage: $(vmImageName)
        
        steps:
          - task: NodeTool@0
            displayName: 'Instalar Node.js'
            inputs:
              versionSpec: '18.x'
          
          - script: |
              cd app/src
              npm ci
              npm run test --if-present
            displayName: 'Instalar dependências e executar testes'
          
          - task: Docker@2
            displayName: 'Build da imagem Docker'
            inputs:
              command: 'build'
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              buildContext: $(buildContext)
              tags: |
                $(imageTag)
                latest
          
          - task: Docker@2
            displayName: 'Scan de segurança da imagem'
            inputs:
              command: 'run'
              arguments: '--rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image $(imageRepository):$(imageTag)'
            continueOnError: true
          
          - script: |
              echo "Build ID: $(Build.BuildId)"
              echo "Source Branch: $(Build.SourceBranch)"
              echo "Image Tag: $(imageTag)"
            displayName: 'Informações do Build'

  # Stage 2: Qualidade e Segurança
  - stage: Quality
    displayName: 'Qualidade e Segurança'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: CodeQuality
        displayName: 'Análise de Qualidade'
        pool:
          vmImage: $(vmImageName)
        
        steps:
          - task: NodeTool@0
            displayName: 'Instalar Node.js'
            inputs:
              versionSpec: '18.x'
          
          - script: |
              cd app/src
              npm ci
              npx eslint . --ext .js --format junit --output-file eslint-results.xml || true
            displayName: 'ESLint Analysis'
            continueOnError: true
          
          - task: PublishTestResults@2
            displayName: 'Publicar resultados ESLint'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'app/src/eslint-results.xml'
              testRunTitle: 'ESLint Results'
            condition: always()
      
      - job: HelmValidation
        displayName: 'Validação Helm'
        pool:
          vmImage: $(vmImageName)
        
        steps:
          - task: HelmInstaller@1
            displayName: 'Instalar Helm'
            inputs:
              helmVersionToInstall: 'latest'
          
          - script: |
              helm lint $(helmChartPath)
              helm template test-release $(helmChartPath) --dry-run
            displayName: 'Lint e Template Helm Chart'

  # Stage 3: Push para Registry
  - stage: Push
    displayName: 'Push para Container Registry'
    dependsOn: Quality
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - job: PushImage
        displayName: 'Push da Imagem'
        pool:
          vmImage: $(vmImageName)
        
        steps:
          - task: Docker@2
            displayName: 'Build da imagem'
            inputs:
              command: 'build'
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              buildContext: $(buildContext)
              tags: |
                $(imageTag)
                latest
          
          - task: Docker@2
            displayName: 'Login no Azure Container Registry'
            inputs:
              command: 'login'
              containerRegistry: $(dockerRegistryServiceConnection)
          
          - task: Docker@2
            displayName: 'Push da imagem para ACR'
            inputs:
              command: 'push'
              repository: $(containerRegistry)/$(imageRepository)
              tags: |
                $(imageTag)
                latest
          
          - script: |
              echo "Imagem pushada: $(containerRegistry)/$(imageRepository):$(imageTag)"
              echo "Imagem latest: $(containerRegistry)/$(imageRepository):latest"
            displayName: 'Informações da imagem'

  # Stage 4: Deploy para Development
  - stage: DeployDev
    displayName: 'Deploy Development'
    dependsOn: Push
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      - name: environment
        value: 'development'
    jobs:
      - deployment: DeployToAKS
        displayName: 'Deploy para AKS Development'
        pool:
          vmImage: $(vmImageName)
        environment: 'development'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: HelmInstaller@1
                  displayName: 'Instalar Helm'
                  inputs:
                    helmVersionToInstall: 'latest'
                
                - task: Kubernetes@1
                  displayName: 'Kubectl login'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(kubernetesServiceConnection)
                    command: 'login'
                
                - script: |
                    kubectl create namespace $(k8sNamespace) --dry-run=client -o yaml | kubectl apply -f -
                  displayName: 'Criar namespace'
                
                - task: HelmDeploy@0
                  displayName: 'Deploy com Helm'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceConnection: $(kubernetesServiceConnection)
                    namespace: $(k8sNamespace)
                    command: 'upgrade'
                    chartType: 'FilePath'
                    chartPath: $(helmChartPath)
                    releaseName: '$(appName)-dev'
                    valueFile: '$(helmChartPath)/values.yaml'
                    overrideValues: |
                      image.repository=$(containerRegistry)/$(imageRepository)
                      image.tag=$(imageTag)
                      replicaCount=2
                      resources.requests.cpu=100m
                      resources.requests.memory=128Mi
                      resources.limits.cpu=500m
                      resources.limits.memory=512Mi
                    install: true
                    waitForExecution: true
                
                - script: |
                    echo "Verificando status do deployment..."
                    kubectl get pods -n $(k8sNamespace) -l app.kubernetes.io/name=$(appName)
                    kubectl get services -n $(k8sNamespace)
                    echo ""
                    echo "Aguardando pods ficarem prontos..."
                    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=$(appName) -n $(k8sNamespace) --timeout=300s
                  displayName: 'Verificar deployment'
                
                - script: |
                    echo "=== DEPLOYMENT CONCLUÍDO ==="
                    echo "Ambiente: Development"
                    echo "Namespace: $(k8sNamespace)"
                    echo "Release: $(appName)-dev"
                    echo "Imagem: $(containerRegistry)/$(imageRepository):$(imageTag)"
                    echo ""
                    echo "Comandos úteis:"
                    echo "kubectl get pods -n $(k8sNamespace)"
                    echo "kubectl logs -f deployment/$(appName) -n $(k8sNamespace)"
                    echo "kubectl port-forward service/$(appName)-service 8080:80 -n $(k8sNamespace)"
                  displayName: 'Informações do deployment'

  # Stage 5: Testes de Integração
  - stage: IntegrationTests
    displayName: 'Testes de Integração'
    dependsOn: DeployDev
    condition: succeeded()
    jobs:
      - job: TestApp
        displayName: 'Testes da Aplicação'
        pool:
          vmImage: $(vmImageName)
        
        steps:
          - task: Kubernetes@1
            displayName: 'Kubectl login'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: $(kubernetesServiceConnection)
              command: 'login'
          
          - script: |
              echo "Executando testes de integração..."
              
              # Verificar se pods estão rodando
              kubectl get pods -n $(k8sNamespace) -l app.kubernetes.io/name=$(appName)
              
              # Test health endpoint
              echo "Testando health endpoint..."
              kubectl port-forward service/$(appName)-service 8080:80 -n $(k8sNamespace) &
              sleep 10
              
              # Teste básico de conectividade
              curl -f http://localhost:8080/health || exit 1
              echo "✅ Health check passou"
              
              # Teste da página principal
              curl -f http://localhost:8080/ || exit 1
              echo "✅ Página principal acessível"
              
              # Matar port-forward
              pkill -f "kubectl port-forward"
              
              echo "✅ Todos os testes passaram!"
            displayName: 'Executar testes de integração'

  # Stage 6: Deploy para Production (Manual)
  - stage: DeployProd
    displayName: 'Deploy Production'
    dependsOn: IntegrationTests
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      - name: environment
        value: 'production'
    jobs:
      - deployment: DeployToProd
        displayName: 'Deploy para Produção'
        pool:
          vmImage: $(vmImageName)
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: HelmInstaller@1
                  displayName: 'Instalar Helm'
                  inputs:
                    helmVersionToInstall: 'latest'
                
                - task: HelmDeploy@0
                  displayName: 'Deploy Produção com Helm'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceConnection: $(kubernetesServiceConnection)
                    namespace: 'production'
                    command: 'upgrade'
                    chartType: 'FilePath'
                    chartPath: $(helmChartPath)
                    releaseName: '$(appName)-prod'
                    valueFile: '$(helmChartPath)/values.yaml'
                    overrideValues: |
                      image.repository=$(containerRegistry)/$(imageRepository)
                      image.tag=$(imageTag)
                      replicaCount=3
                      resources.requests.cpu=250m
                      resources.requests.memory=256Mi
                      resources.limits.cpu=1000m
                      resources.limits.memory=1Gi
                      autoscaling.enabled=true
                      autoscaling.minReplicas=3
                      autoscaling.maxReplicas=10
                    install: true
                    waitForExecution: true
                
                - script: |
                    echo "=== DEPLOY PRODUÇÃO CONCLUÍDO ==="
                    echo "Imagem: $(containerRegistry)/$(imageRepository):$(imageTag)"
                    echo "Namespace: production"
                    echo "Release: $(appName)-prod"
                    echo "Réplicas: 3 (auto-scaling habilitado)"
                    kubectl get pods -n production -l app.kubernetes.io/name=$(appName)
                  displayName: 'Confirmar deploy produção'
