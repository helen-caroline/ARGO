# ================================
# PASSO 3: CONFIGURAR KUBECTL E DEPLOY DA APLICA√á√ÉO
# ================================

Write-Host "‚ò∏Ô∏è CONFIGURANDO KUBERNETES E DEPLOYANDO APLICA√á√ÉO" -ForegroundColor Green

# Ler informa√ß√µes da infraestrutura
if (Test-Path "$PSScriptRoot\..\terraform\infrastructure-info.txt") {
    Get-Content "$PSScriptRoot\..\terraform\infrastructure-info.txt" | ForEach-Object {
        if ($_ -match "^([^=]+)=(.+)$") {
            Set-Variable -Name $matches[1] -Value $matches[2]
        }
    }
} else {
    Write-Host "‚ùå Arquivo infrastructure-info.txt n√£o encontrado" -ForegroundColor Red
    Write-Host "Execute primeiro o script 02-deploy-infrastructure.ps1" -ForegroundColor Yellow
    exit 1
}

# Configurar kubectl para AKS
Write-Host "üîß Configurando kubectl para AKS..." -ForegroundColor Cyan
az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME --overwrite-existing

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao configurar kubectl" -ForegroundColor Red
    exit 1
}

# Verificar conex√£o com cluster
Write-Host "‚úÖ Verificando conex√£o com cluster..." -ForegroundColor Cyan
kubectl cluster-info
kubectl get nodes

# Fazer login no ACR
Write-Host "üîê Fazendo login no ACR..." -ForegroundColor Cyan
az acr login --name $ACR_NAME

# Build e push da imagem Docker
Write-Host "üê≥ Fazendo build e push da imagem..." -ForegroundColor Cyan
Set-Location "$PSScriptRoot\..\app"

# Tag da imagem
$imageTag = "v1.0.$(Get-Date -Format 'yyyyMMdd-HHmm')"
$fullImageName = "$ACR_NAME.azurecr.io/devops-challenge-app:$imageTag"

# Build
docker build -t "devops-challenge-app:$imageTag" .
docker tag "devops-challenge-app:$imageTag" $fullImageName

# Push para ACR
docker push $fullImageName

Write-Host "‚úÖ Imagem enviada: $fullImageName" -ForegroundColor Green

# Deploy com Helm
Write-Host "üì¶ Fazendo deploy com Helm..." -ForegroundColor Cyan
Set-Location "$PSScriptRoot\..\helm"

# Instalar/atualizar aplica√ß√£o
helm upgrade --install devops-challenge-app . `
    --namespace devops-challenge `
    --create-namespace `
    --set image.repository="$ACR_NAME.azurecr.io/devops-challenge-app" `
    --set image.tag="$imageTag" `
    --wait --timeout=300s

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro no deploy com Helm" -ForegroundColor Red
    exit 1
}

# Verificar status do deploy
Write-Host "üìä Verificando status do deploy..." -ForegroundColor Cyan
kubectl get pods -n devops-challenge
kubectl get services -n devops-challenge

# Aguardar pods ficarem prontos
Write-Host "‚è≥ Aguardando pods ficarem prontos..." -ForegroundColor Cyan
kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=devops-challenge-app -n devops-challenge --timeout=300s

# Testar aplica√ß√£o
Write-Host "üß™ Testando aplica√ß√£o..." -ForegroundColor Cyan
$podName = kubectl get pods -n devops-challenge -l app.kubernetes.io/name=devops-challenge-app -o jsonpath="{.items[0].metadata.name}"

# Port forward para testar
Start-Job -ScriptBlock {
    kubectl port-forward pod/$using:podName 8080:8080 -n devops-challenge
}

Start-Sleep 5

# Teste b√°sico
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8080/health" -TimeoutSec 10
    Write-Host "‚úÖ APLICA√á√ÉO FUNCIONANDO!" -ForegroundColor Green
    Write-Host "üéâ Health Check: $($response.status)" -ForegroundColor Yellow
} catch {
    Write-Host "‚ö†Ô∏è Erro no teste da aplica√ß√£o: $($_.Exception.Message)" -ForegroundColor Yellow
}

# Parar port forward
Get-Job | Stop-Job
Get-Job | Remove-Job

Write-Host "üéØ DEPLOY CONCLU√çDO COM SUCESSO!" -ForegroundColor Green
Write-Host "üåê Para acessar a aplica√ß√£o use:" -ForegroundColor Cyan
Write-Host "kubectl port-forward service/devops-challenge-app-service 8080:80 -n devops-challenge" -ForegroundColor White
